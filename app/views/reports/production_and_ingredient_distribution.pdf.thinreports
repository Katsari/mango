report.set_layout tlf: 'reports/thinreports_layouts/production_and_ingredient_distribution'

report.events.on :generate do |e|
  e.pages.each do |page|
    page.item(:page).value(page.no)
    page.item(:page_total).value(report.page_count)
  end
end

report.layout.config.list(:results) do
  use_stores total: 0

  events.on :footer_insert do |e|
    e.section.item(:total).value(e.store.total.round(2))
  end
end

def add_total_row(list, total, internal_consumption)
  list.add_row do |row|
    row.item(:background).style(:fill, '#7f7f7f')
    row.item(:internal_consumption) do |item|
      item.style(:color, '#ffffff')
      item.value(internal_consumption ? 'TOTAL CONSUMO INTERNO' : 'TOTAL VENTAS')
    end
    row.item(:total) do |item|
      item.style(:color, '#ffffff')
      item.style(:bold, true)
      item.value(total.round(2))
    end
  end
end

report.start_new_page do |page|
  page.values company_name: @data['company_name']
  page.values company_address: @data['company_address']
  page.values company_rif: @data['company_rif']
  page.values company_logo: @data['company_logo']
  page.values title: @data['title']
  page.values date: EasyModel.print_formatted_date(@data[:date])

  table = report.list(:results)

  table.header do |header|
    @data[:ingredients].each_with_index do |ingredient, i|
      header
        .item("ingredient_#{i + 1}".to_sym)
        .value(ingredient[:name])
    end
  end

  ipc = @data[:ingredient_id_per_column]

  alternate = 1
  internal_consumption = @data[:results].first[:internal_consumption]
  per_consumption_type_production = 0

  @data[:results].each do |result|
    if result[:internal_consumption] != internal_consumption
      add_total_row(table,
                    per_consumption_type_production,
                    internal_consumption)
      alternate = 1
      per_consumption_type_production = 0
    end

    first_version, *rest_of_versions = *result[:versions]

    table.add_row do |row|
      row.item(:background).style(:fill, alternate == 1 ? '#ffffff' : '#eeece1')
      row.item(:recipe_name).value(result[:recipe_name])
      row.item(:version).value(first_version[:version])
      row.item(:days).value(first_version[:days])

      total = first_version[:total]
      table.store.total += total
      per_consumption_type_production += total
      row.item(:total).value(total.round(2))

      12.times do |i|
        percentage = first_version[:percentages][ipc[i]]
        next if percentage.nil?
        row
          .item("percentage_#{i + 1}".to_sym)
          .value("#{percentage.round(1)}%")
      end
      row
        .item(:percentage_total)
        .value("#{first_version[:percentage_total].round(1)}%")
    end
    alternate *= -1

    rest_of_versions.each do |version_data|
      table.add_row do |row|
        row.item(:background).style(:fill, alternate == 1 ? '#ffffff' : '#eeece1')
        row.item(:version).value(version_data[:version])
        row.item(:days).value(version_data[:days])

        total = version_data[:total]
        row.item(:total).value(total.round(2))
        table.store.total += total
        per_consumption_type_production += total

        12.times do |i|
          percentage = version_data[:percentages][ipc[i]]
          next if percentage.nil?
          row
            .item("percentage_#{i + 1}".to_sym)
            .value("#{percentage.round(1)}%")
        end
        row
          .item(:percentage_total)
          .value("#{version_data[:percentage_total].round(1)}%")
      end
      alternate *= -1
    end
    internal_consumption = result[:internal_consumption]
  end
  add_total_row(table, per_consumption_type_production, internal_consumption)
end
